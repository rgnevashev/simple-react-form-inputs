import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React from 'react';
import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';

import Input_controller from './input controller';

// Usage:
//
// <ReactInput
// 	value={this.state.phone}
// 	onChange={phone => this.setState({ phone })}
// 	parse={character => character}
// 	format={value => ({ text: value, template: 'xxxxxxxx' })}/>
//

var ReactInput = function (_React$Component) {
	_inherits(ReactInput, _React$Component);

	function ReactInput(props) {
		_classCallCheck(this, ReactInput);

		var _this = _possibleConstructorReturn(this, (ReactInput.__proto__ || _Object$getPrototypeOf(ReactInput)).call(this));

		_this.on_blur = _this.on_blur.bind(_this);
		_this.on_key_down = _this.on_key_down.bind(_this);
		_this.get_input_element = _this.get_input_element.bind(_this);

		_this.input_controller = new Input_controller(_this.get_input_element, props.parse, props.format, props.onChange);
		return _this;
	}

	_createClass(ReactInput, [{
		key: 'render',
		value: function render() {
			var _this2 = this;

			var _props = this.props,
			    value = _props.value,
			    parse = _props.parse,
			    format = _props.format,
			    rest = _objectWithoutProperties(_props, ['value', 'parse', 'format']);

			return React.createElement('input', _extends({}, rest, {
				ref: function ref(_ref) {
					return _this2.input = _ref;
				},
				value: format(value === undefined || value === null ? '' : value).text,
				onKeyDown: this.on_key_down,
				onChange: this.input_controller.onChange,
				onPaste: this.input_controller.onPaste,
				onCut: this.input_controller.onCut,
				onBlur: this.on_blur }));
		}

		// Returns <input/> DOM Element

	}, {
		key: 'get_input_element',
		value: function get_input_element() {
			return ReactDOM.findDOMNode(this.input);
		}

		// This handler is a workaround for `redux-form`

	}, {
		key: 'on_blur',
		value: function on_blur(event) {
			var onBlur = this.props.onBlur;

			// This `onBlur` interceptor is a workaround for `redux-form`,
			// so that it gets the right (parsed, not the formatted one)
			// `event.target.value` in its `onBlur` handler.

			if (onBlur) {
				var _event = _extends({}, event, {
					target: _extends({}, event.target, {
						value: this.input_controller.getParsedValue().value
					})
				});

				// For `redux-form` event detection.
				// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js
				_event.stopPropagation = event.stopPropagation;
				_event.preventDefault = event.preventDefault;

				onBlur(_event);
			}
		}
	}, {
		key: 'on_key_down',
		value: function on_key_down(event) {
			var onKeyDown = this.props.onKeyDown;


			if (onKeyDown) {
				onKeyDown(event);
			}

			this.input_controller.onKeyDown(event);
		}
	}, {
		key: 'focus',
		value: function focus() {
			this.get_input_element().focus();
		}
	}]);

	return ReactInput;
}(React.Component);

ReactInput.propTypes = {
	// Parses a single characher of `<input/>` text
	parse: PropTypes.func.isRequired,

	// Formats `value` into `<input/>` text
	format: PropTypes.func.isRequired,

	// Is parsed from <input/> text
	value: PropTypes.string,

	// This handler is called each time `<input/>` text is changed
	onChange: PropTypes.func.isRequired,

	// This `onBlur` interceptor is a workaround for `redux-form`,
	// so that it gets the parsed `value` in its `onBlur` handler,
	// not the formatted text.
	onBlur: PropTypes.func,

	// Passthrough
	onKeyDown: PropTypes.func
};
export default ReactInput;
//# sourceMappingURL=react input.js.map