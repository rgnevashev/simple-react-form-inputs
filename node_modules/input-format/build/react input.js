'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _inputController = require('./input controller');

var _inputController2 = _interopRequireDefault(_inputController);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Usage:
//
// <ReactInput
// 	value={this.state.phone}
// 	onChange={phone => this.setState({ phone })}
// 	parse={character => character}
// 	format={value => ({ text: value, template: 'xxxxxxxx' })}/>
//
var ReactInput = function (_React$Component) {
	(0, _inherits3.default)(ReactInput, _React$Component);

	function ReactInput(props) {
		(0, _classCallCheck3.default)(this, ReactInput);

		var _this = (0, _possibleConstructorReturn3.default)(this, (ReactInput.__proto__ || (0, _getPrototypeOf2.default)(ReactInput)).call(this));

		_this.on_blur = _this.on_blur.bind(_this);
		_this.on_key_down = _this.on_key_down.bind(_this);
		_this.get_input_element = _this.get_input_element.bind(_this);

		_this.input_controller = new _inputController2.default(_this.get_input_element, props.parse, props.format, props.onChange);
		return _this;
	}

	(0, _createClass3.default)(ReactInput, [{
		key: 'render',
		value: function render() {
			var _this2 = this;

			var _props = this.props,
			    value = _props.value,
			    parse = _props.parse,
			    format = _props.format,
			    rest = (0, _objectWithoutProperties3.default)(_props, ['value', 'parse', 'format']);


			return _react2.default.createElement('input', (0, _extends3.default)({}, rest, {
				ref: function ref(_ref) {
					return _this2.input = _ref;
				},
				value: format(value === undefined || value === null ? '' : value).text,
				onKeyDown: this.on_key_down,
				onChange: this.input_controller.onChange,
				onPaste: this.input_controller.onPaste,
				onCut: this.input_controller.onCut,
				onBlur: this.on_blur }));
		}

		// Returns <input/> DOM Element

	}, {
		key: 'get_input_element',
		value: function get_input_element() {
			return _reactDom2.default.findDOMNode(this.input);
		}

		// This handler is a workaround for `redux-form`

	}, {
		key: 'on_blur',
		value: function on_blur(event) {
			var onBlur = this.props.onBlur;

			// This `onBlur` interceptor is a workaround for `redux-form`,
			// so that it gets the right (parsed, not the formatted one)
			// `event.target.value` in its `onBlur` handler.

			if (onBlur) {
				var _event = (0, _extends3.default)({}, event, {
					target: (0, _extends3.default)({}, event.target, {
						value: this.input_controller.getParsedValue().value
					})
				});

				// For `redux-form` event detection.
				// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js
				_event.stopPropagation = event.stopPropagation;
				_event.preventDefault = event.preventDefault;

				onBlur(_event);
			}
		}
	}, {
		key: 'on_key_down',
		value: function on_key_down(event) {
			var onKeyDown = this.props.onKeyDown;


			if (onKeyDown) {
				onKeyDown(event);
			}

			this.input_controller.onKeyDown(event);
		}
	}, {
		key: 'focus',
		value: function focus() {
			this.get_input_element().focus();
		}
	}]);
	return ReactInput;
}(_react2.default.Component);

ReactInput.propTypes = {
	// Parses a single characher of `<input/>` text
	parse: _propTypes2.default.func.isRequired,

	// Formats `value` into `<input/>` text
	format: _propTypes2.default.func.isRequired,

	// Is parsed from <input/> text
	value: _propTypes2.default.string,

	// This handler is called each time `<input/>` text is changed
	onChange: _propTypes2.default.func.isRequired,

	// This `onBlur` interceptor is a workaround for `redux-form`,
	// so that it gets the parsed `value` in its `onBlur` handler,
	// not the formatted text.
	onBlur: _propTypes2.default.func,

	// Passthrough
	onKeyDown: _propTypes2.default.func
};
exports.default = ReactInput;
//# sourceMappingURL=react input.js.map