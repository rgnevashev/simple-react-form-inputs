{"version":3,"sources":["../source/react input.js"],"names":["ReactInput","props","on_blur","bind","on_key_down","get_input_element","input_controller","parse","format","onChange","value","rest","input","ref","undefined","text","onPaste","onCut","findDOMNode","event","onBlur","_event","target","getParsedValue","stopPropagation","preventDefault","onKeyDown","focus","Component","propTypes","func","isRequired","string"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACqBA,U;;;AAyBpB,qBAAYC,KAAZ,EACA;AAAA;;AAAA;;AAGC,QAAKC,OAAL,GAAyB,MAAKA,OAAL,CAAaC,IAAb,OAAzB;AACA,QAAKC,WAAL,GAAyB,MAAKA,WAAL,CAAiBD,IAAjB,OAAzB;AACA,QAAKE,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBF,IAAvB,OAAzB;;AAEA,QAAKG,gBAAL,GAAwB,8BAAqB,MAAKD,iBAA1B,EAA6CJ,MAAMM,KAAnD,EAA0DN,MAAMO,MAAhE,EAAwEP,MAAMQ,QAA9E,CAAxB;AAPD;AAQC;;;;2BAGD;AAAA;;AAAA,gBAC2C,KAAKR,KADhD;AAAA,OACSS,KADT,UACSA,KADT;AAAA,OACgBH,KADhB,UACgBA,KADhB;AAAA,OACuBC,MADvB,UACuBA,MADvB;AAAA,OACkCG,IADlC;;;AAGC,UACC,kEACKA,IADL;AAEC,SAAM;AAAA,YAAO,OAAKC,KAAL,GAAaC,IAApB;AAAA,KAFP;AAGC,WAAQL,OAAQE,UAAUI,SAAV,IAAuBJ,UAAU,IAAlC,GAA0C,EAA1C,GAA+CA,KAAtD,EAA6DK,IAHtE;AAIC,eAAY,KAAKX,WAJlB;AAKC,cAAW,KAAKE,gBAAL,CAAsBG,QALlC;AAMC,aAAU,KAAKH,gBAAL,CAAsBU,OANjC;AAOC,WAAQ,KAAKV,gBAAL,CAAsBW,KAP/B;AAQC,YAAS,KAAKf,OARf,IADD;AAWA;;AAED;;;;sCAEA;AACC,UAAO,mBAASgB,WAAT,CAAqB,KAAKN,KAA1B,CAAP;AACA;;AAED;;;;0BACQO,K,EACR;AAAA,OACSC,MADT,GACoB,KAAKnB,KADzB,CACSmB,MADT;;AAGC;AACA;AACA;;AACA,OAAIA,MAAJ,EACA;AACC,QAAMC,oCAEFF,KAFE;AAGLG,wCAEIH,MAAMG,MAFV;AAGCZ,aAAO,KAAKJ,gBAAL,CAAsBiB,cAAtB,GAAuCb;AAH/C;AAHK,MAAN;;AAUA;AACA;AACAW,WAAOG,eAAP,GAAyBL,MAAMK,eAA/B;AACAH,WAAOI,cAAP,GAAyBN,MAAMM,cAA/B;;AAEAL,WAAOC,MAAP;AACA;AACD;;;8BAEWF,K,EACZ;AAAA,OACSO,SADT,GACuB,KAAKzB,KAD5B,CACSyB,SADT;;;AAGC,OAAIA,SAAJ,EACA;AACCA,cAAUP,KAAV;AACA;;AAED,QAAKb,gBAAL,CAAsBoB,SAAtB,CAAgCP,KAAhC;AACA;;;0BAGD;AACC,QAAKd,iBAAL,GAAyBsB,KAAzB;AACA;;;EAvGsC,gBAAMC,S;;AAAzB5B,U,CAEb6B,S,GACP;AACC;AACAtB,QAAS,oBAAUuB,IAAV,CAAeC,UAFzB;;AAIC;AACAvB,SAAS,oBAAUsB,IAAV,CAAeC,UALzB;;AAOC;AACArB,QAAS,oBAAUsB,MARpB;;AAUC;AACAvB,WAAW,oBAAUqB,IAAV,CAAeC,UAX3B;;AAaC;AACA;AACA;AACAX,SAAS,oBAAUU,IAhBpB;;AAkBC;AACAJ,YAAY,oBAAUI;AAnBvB,C;kBAHoB9B,U","file":"react input.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport ReactDOM from 'react-dom'\n\nimport Input_controller from './input controller'\n\n// Usage:\n//\n// <ReactInput\n// \tvalue={this.state.phone}\n// \tonChange={phone => this.setState({ phone })}\n// \tparse={character => character}\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\n//\nexport default class ReactInput extends React.Component\n{\n\tstatic propTypes =\n\t{\n\t\t// Parses a single characher of `<input/>` text\n\t\tparse  : PropTypes.func.isRequired,\n\n\t\t// Formats `value` into `<input/>` text\n\t\tformat : PropTypes.func.isRequired,\n\n\t\t// Is parsed from <input/> text\n\t\tvalue  : PropTypes.string,\n\n\t\t// This handler is called each time `<input/>` text is changed\n\t\tonChange : PropTypes.func.isRequired,\n\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`,\n\t\t// so that it gets the parsed `value` in its `onBlur` handler,\n\t\t// not the formatted text.\n\t\tonBlur : PropTypes.func,\n\n\t\t// Passthrough\n\t\tonKeyDown : PropTypes.func\n\t}\n\n\tconstructor(props)\n\t{\n\t\tsuper()\n\n\t\tthis.on_blur           = this.on_blur.bind(this)\n\t\tthis.on_key_down       = this.on_key_down.bind(this)\n\t\tthis.get_input_element = this.get_input_element.bind(this)\n\n\t\tthis.input_controller = new Input_controller(this.get_input_element, props.parse, props.format, props.onChange)\n\t}\n\n\trender()\n\t{\n\t\tconst { value, parse, format, ...rest } = this.props\n\n\t\treturn (\n\t\t\t<input\n\t\t\t\t{...rest}\n\t\t\t\tref={ ref => this.input = ref }\n\t\t\t\tvalue={ format((value === undefined || value === null) ? '' : value).text }\n\t\t\t\tonKeyDown={ this.on_key_down }\n\t\t\t\tonChange={ this.input_controller.onChange }\n\t\t\t\tonPaste={ this.input_controller.onPaste }\n\t\t\t\tonCut={ this.input_controller.onCut }\n\t\t\t\tonBlur={ this.on_blur }/>\n\t\t)\n\t}\n\n\t// Returns <input/> DOM Element\n\tget_input_element()\n\t{\n\t\treturn ReactDOM.findDOMNode(this.input)\n\t}\n\n\t// This handler is a workaround for `redux-form`\n\ton_blur(event)\n\t{\n\t\tconst { onBlur } = this.props\n\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`,\n\t\t// so that it gets the right (parsed, not the formatted one)\n\t\t// `event.target.value` in its `onBlur` handler.\n\t\tif (onBlur)\n\t\t{\n\t\t\tconst _event =\n\t\t\t{\n\t\t\t\t...event,\n\t\t\t\ttarget:\n\t\t\t\t{\n\t\t\t\t\t...event.target,\n\t\t\t\t\tvalue: this.input_controller.getParsedValue().value\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// For `redux-form` event detection.\n\t\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\t\t\t_event.stopPropagation = event.stopPropagation\n\t\t\t_event.preventDefault  = event.preventDefault\n\n\t\t\tonBlur(_event)\n\t\t}\n\t}\n\n\ton_key_down(event)\n\t{\n\t\tconst { onKeyDown } = this.props\n\n\t\tif (onKeyDown)\n\t\t{\n\t\t\tonKeyDown(event)\n\t\t}\n\n\t\tthis.input_controller.onKeyDown(event)\n\t}\n\n\tfocus()\n\t{\n\t\tthis.get_input_element().focus()\n\t}\n}"]}